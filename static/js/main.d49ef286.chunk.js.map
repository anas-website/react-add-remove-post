{"version":3,"sources":["components/Post.js","components/Addpost.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","state","index","console","log","style","backgroundColor","width","height","margin","this","name","info","onClick","del","color","Component","Addpost","validName","e","target","value","setState","backGroundColor","validInfo","length","onChange","type","placeholder","Add","App","post","n","i","deletePost","tempPost","filter","element","className","map","item","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAEqBA,G,wDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAM,CAACC,MAAMF,EAAME,OAHV,E,qDAOR,IAAD,OAGL,OAFAC,QAAQC,IAAI,YAGR,yBAAKC,MAAO,CAACC,gBAAgB,OAAQC,MAAM,QAASC,OAAO,QAAUC,OAAO,SAE5E,qCAAaC,KAAKV,MAAMW,KAAxB,KACA,oCAAYD,KAAKV,MAAMY,KAAvB,KACA,4BAAQC,QAAU,kBAAI,EAAKb,MAAMc,IAAI,EAAKb,MAAMC,QAAQG,MAAO,CAACU,MAAM,QAAtE,U,GAhBsBC,cCAbC,E,kDACnB,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAYRkB,UAAY,SAACC,GACW,SAAlBA,EAAEC,OAAOC,MACX,EAAKC,SAAS,CAAEX,KAAMQ,EAAEC,OAAOC,MAAOE,gBAAiB,UAEvD,EAAKD,SAAS,CAAEX,KAAMQ,EAAEC,OAAOC,MAAOE,gBAAiB,WAjBxC,EAoBnBC,UAAY,SAACL,GACPA,EAAEC,OAAOC,MAAMI,OAAS,EAC1B,EAAKH,SAAS,CAAEV,KAAOO,EAAEC,OAAOC,MAAQ,UAExC,EAAKC,SAAS,CAAEV,KAAMO,EAAEC,OAAOC,SAtBjC,EAAKpB,MAAQ,CAAEU,KAAM,GAAIC,KAAM,GAAIW,gBAAiB,SAFnC,E,qDA4BT,IAAD,OACP,OACE,yBAAKlB,MAAO,CAAEC,gBAAiBI,KAAKT,MAAMsB,kBACxC,wCACA,6BACA,2BAAOG,SAAYhB,KAAKQ,UAAWS,KAAK,OAAMC,YAAY,SAC1D,6BACA,2BACEF,SAAYhB,KAAKc,UAAWG,KAAK,OAAOC,YAAY,SACtD,6BACA,4BAAQf,QAAS,WAAO,EAAKb,MAAM6B,IAAI,EAAK5B,MAAMU,KAAM,EAAKV,MAAMW,QAAnE,iB,GAvC6BI,aCIhBc,E,4MAEjB7B,MAAO,CAAC8B,KAAK,CAAE,CAACpB,KAAK,IAAKC,KAAK,SAAS,CAACD,KAAK,IAAKC,KAAK,SAAU,CAACD,KAAK,IAAKC,KAAK,W,EAGtFK,QAAQ,SAACe,EAAEC,GACT,EAAKX,SAAS,CAACS,KAAK,CAAE,CAACpB,KAAKqB,EAAEpB,KAAKqB,IAAhB,mBAAuB,EAAKhC,MAAM8B,U,EAGvDG,WAAW,SAACD,GACZ,IAAIE,EAAS,EAAKlC,MAAM8B,KAAKK,QAAO,SAACC,EAAQnC,GAAT,OAAkBA,GAAO+B,KAE3D,EAAKX,SAAS,CAACS,KAAKI,K,uDAEV,IAAD,OAEP,OACE,yBAAKG,UAAU,OACrB,kBAAC,EAAD,CAAST,IAAKnB,KAAKO,UACdP,KAAKT,MAAM8B,KAAKQ,KAAI,SAACC,EAAKP,GACzB,OAAO,kBAAC,EAAD,CAAMQ,IAAKR,EAAGtB,KAAM6B,EAAK7B,KAAMC,KAAM4B,EAAK5B,KAAME,IAAK,EAAKoB,WAAYhC,MAAO+B,Y,GApBzDjB,aCMb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,a","file":"static/js/main.d49ef286.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Post extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state={index:props.index}\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('rendered');\r\n        \r\n        return (\r\n            <div style={{backgroundColor:'gray' ,width:'800px' ,height:'150px'  ,margin:'auto',}} >\r\n        \r\n            <h2  >title:{this.props.name} </h2>   \r\n            <h3  >info:{this.props.info} </h3>  \r\n            <button onClick={ ()=>this.props.del(this.state.index)} style={{color:'red'} }>x</button> \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Addpost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: \"\", info: \"\", backGroundColor: \"white\" };\r\n  }\r\n\r\n//   Addname = (e) => {\r\n//     this.setState({ name: e.target.value });\r\n//   };\r\n\r\n//   Addinfo = (e) => {\r\n//     this.setState({ info: e.target.value });\r\n//   };\r\n\r\n  validName = (e) => {\r\n    if (e.target.value == \"Orgad\") {\r\n      this.setState({ name: e.target.value, backGroundColor: \"green\" });\r\n    } else {\r\n      this.setState({ name: e.target.value, backGroundColor: \"white\" });\r\n    }\r\n  };\r\n  validInfo = (e) => {\r\n    if (e.target.value.length > 5) {\r\n      this.setState({ info: (e.target.value = \"Error\") });\r\n    } else {\r\n      this.setState({ info: e.target.value });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ backgroundColor: this.state.backGroundColor }}>\r\n        <h1>add post</h1>\r\n        <br />\r\n        <input onChange={( this.validName)}type=\"text\"placeholder=\"name\"></input>\r\n        <br />\r\n        <input\r\n          onChange={( this.validInfo)}type=\"text\" placeholder=\"info\"></input>\r\n        <br />\r\n        <button onClick={() => {this.props.Add(this.state.name, this.state.info);}}>Add post</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","\nimport './App.css';\nimport React, { Component } from 'react'\nimport Post from './components/Post';\nimport Addpost from './components/Addpost';\n\nexport default class App extends Component {\n\n    state= {post:[ {name:'a' ,info:'aa...'},{name:'b' ,info:'bb...'}, {name:'c' ,info:'cc...'}]}\n\n\nAddpost=(n,i)=>{\n  this.setState({post: [{name:n,info:i} ,...this.state.post]})\n}\n\ndeletePost=(i)=>{\nlet tempPost=this.state.post.filter((element,index)=>(index!=i))\n\n  this.setState({post:tempPost})\n}\n  render() {\n    \n    return (\n      <div className=\"App\">\n<Addpost Add={this.Addpost}/>\n    {this.state.post.map((item,i)=>{\n      return <Post key={i} name={item.name} info={item.info} del={this.deletePost} index={i}/>\n    })}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}